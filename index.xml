<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thanh&#39;s Notepad </title>
    <link>https://thanhngvpt.github.io/index.xml</link>
    <language>en-us</language>
    <author>thanhngvpt</author>
    <rights>(C) 2016</rights>
    <updated>2016-10-23 00:13:54 &#43;0700 ICT</updated>

    
      
        <item>
          <title>Vim usefuls</title>
          <link>https://thanhngvpt.github.io/post/tools/vim-usefuls/</link>
          <pubDate>Sun, 23 Oct 2016 00:13:54 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/tools/vim-usefuls/</guid>
          <description>&lt;p&gt;Vim là 1 trình soạn thảo văn bản nhỏ gọn nhưng cực kì khỏe, nếu được cài đầy đủ plugin nó hoàn toàn có thể sánh ngang các IDE hầm hố. Vim được khá nhiều dev lão luyện dùng điều này cho thấy nó khá tốt và cần đưa vào diện tình nghi ngay nếu chưa biết gì về nó.&lt;/p&gt;

&lt;p&gt;Vim mạnh mẽ nhờ hệ thống plugin khổng lồ đáp ứng hầu hết các yêu cầu của các dev, để cài đặt plugin cho vim ta có thể sử dụng nhiều cách, tuy nhiên cách được sử dụng phổ biến và được khuyến khích là sử dụng một plugin manager, plugin manager lại có vài cái tên để lựa chọn như vundle, neobundle, pathogen &amp;hellip; trong số này thì vundle là cái được khuyến khích. Để cài một plugin sử dụng vundle có thể thêm plugin đó vào file .vimrc hoặc khởi động vim và chạy lệnh :PluginInstall name. Dưới đây là danh sách các plugin nên có.&lt;/p&gt;

&lt;p&gt;Các plugin hay nên cài trong vim: nerdtree, auto-pairs, neocomplete, syntastic, ack, gitv, fugitive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Các câu lệnh và thao tác hữu ích trong vim&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;windows&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Chia cửa sổ hiện tại thành 2 cửa sổ nằm ngang ctrl + w, ctrl + S (shift + s).&lt;/li&gt;
&lt;li&gt;Chia cửa sổ hiện tại thành 2 cửa sổ nằm dọc ctrl + w, ctrl + v&lt;/li&gt;
&lt;li&gt;Di chuyển qua lại giữa các cửa số nhấn ctrl+w 2 lần hoặc ấn ctrl+w rồi sử dụng phím di duyển (gồm: hjkl hoặc các phím mũi tên).&lt;/li&gt;
&lt;li&gt;Thay đổi kích thước cửa sổ:

&lt;ul&gt;
&lt;li&gt;Horizontal (ngang) gõ lệnh :&lt;number_of_column&gt;winc +/- (tăng/giảm).&lt;/li&gt;
&lt;li&gt;Vertical (dọc) gõ lệnh :&lt;number_of_comlumn&gt;winc &amp;gt;/&amp;lt; (tăng/giảm).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Simple Python server</title>
          <link>https://thanhngvpt.github.io/post/python/simple-python-server/</link>
          <pubDate>Sat, 22 Oct 2016 09:07:38 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/python/simple-python-server/</guid>
          <description>&lt;p&gt;Server là từ ngữ khá thần thánh và phổ biến trong giới IT, định nghĩa về server theo wikipedia như sau.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a server is a computer program or a device that provides functionality for other programs or devices&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hiểu biết sâu về server sẽ rất có ích cho các ITer. Bài viết này sẽ xem xét về ứng dụng http server built-in của python để chia sẻ file trong mạng LAN.&lt;/p&gt;

&lt;p&gt;cd tới thư mục muốn chia sẻ rồi chạy lệnh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# python 3
python -m http.server
#
# python 2
python2 -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mode algorithm</title>
          <link>https://thanhngvpt.github.io/post/go/mode-algorithm/</link>
          <pubDate>Fri, 21 Oct 2016 14:15:20 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/go/mode-algorithm/</guid>
          <description>&lt;p&gt;Mode algorithm là thuật toán được sử dụng để tìm ra phần tử lặp lại nhiều nhất trong một array. Source dưới đây cài đặt cho thuật toán tìm mode của 1 array sử dụng ngôn ngữ Go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// sử dụng slice
function sliceMode(input []int) int {
    count := make([]input, len(input))
    maxValue := 0
    maxKey := 0
    for i := range input {
        count[input[i]]++
        if count[input[i]] &amp;gt; maxValue {
            maxValue = count[input[i]]
            maxKey = input[i]
        }
    }

    return maxKey
}

// sử dụng map
function mapMode([]input) int {
    count := make(map[int]int)
    maxValue, maxKey := 0, 0
    for i := range input {
        count[input[i]]++
        if count[input[i]] &amp;gt; maxValue {
            maxValue = count[input[i]]
            maxKey = input[i]
        }
    }

    return maxKey
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>createClass vs Component in React</title>
          <link>https://thanhngvpt.github.io/post/react/create-class-vs-component/</link>
          <pubDate>Thu, 20 Oct 2016 15:55:47 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/react/create-class-vs-component/</guid>
          <description>&lt;p&gt;Để tạo một react component ta có thể dùng cú pháp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// cách 1
const = react.createClass({
    getInitialState() {
        return {name: &#39;David&#39;}
    },

    propTypes: {},

    getDefaultProps() {
        return {}
    },

    handleClick() {
        console.log(this);
    },

    render() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Hello, {this.state.name}&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hoặc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// cách 2
class Comment extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            name: &#39;David&#39;
        };
        this.handleClick = this.handleClick.bind(this);
    }

    handleClick() {
        console.log(this);
    }

    render() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Hello, {this.state.name}&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
}

Comment.propTypes = {};
Comment.defaultProps = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Về bản chất hai cú pháp đều thực hiện công việc giống nhau, cách 1 sử dụng cú pháp ES5 cách 2 sử dụng cú pháp ES6. Vài điểm khác nhau giữa 2 cách như sau:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;initState: cách 1 dùng function getInitialState(), cách 2 set object trong constructor.&lt;/li&gt;
&lt;li&gt;defaultProps: cách 1 là sử dụng function getDefaultProps(), cách 2 set object defaultProps.&lt;/li&gt;
&lt;li&gt;handler Event: cách 1 tự động bind vào component khi gọi, cách 2 phải bind manual hoặc bind trong constructor.&lt;/li&gt;
&lt;li&gt;mixin: cách 1 hỗ trợ, cách 2 không hỗ trợ&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Python tricks</title>
          <link>https://thanhngvpt.github.io/post/python/python-tricks/</link>
          <pubDate>Thu, 20 Oct 2016 14:57:11 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/python/python-tricks/</guid>
          <description>&lt;p&gt;&lt;strong&gt;Unpacking&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#1
a, b, c = 1, 2, 3
d = a, b, c
print(d, type(d)) # (1, 2, 3) - tuple
#
#2
a, b, c = (2 * i + 1 for i in range(3))
d = a, b, c
print(d) # (1, 3, 5)
#
#3
a, (b, c), d = [1, (2, 3), 5]
print(a, b, c, d) # 1 2 3 5
#
#4 - swapping variables
a, b = 1, 2
a, b = b, a
print(a, b) # 2 1
#5 extended unpacking (python 3 only)
a, b, *c = [1, 2, 3, 4, 5, 6]
print(c) # [3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Negative indexing&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
print(a[0], a[-1]) # 1 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Slicing&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
print(a[1:3]) # [2, 3]
print(a[-3:-1]) # [3, 4]
print(a[::2]) # [1, 3, 5]
print(a[::-1]) # [5, 4, 3, 2, 1]
#
# list slice assignment
a[1:-1] = []
print(a) # [1, 5]
#
# naming slice: slice(start, end, step)
a = list(range(5))
last_two = a[-2:]
print(a[last_two]) # [4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Iterating&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# List
a = [&#39;Hello&#39;, &amp;quot;World&amp;quot;, &#39;Python&#39;]
for i, v in enumerate(a):
    print(i, v)
#
# Dictionary (dic_var_name.iteritems() in python 2)
a = {&#39;name&#39;: &#39;Peter&#39;, &#39;age&#39;: 25}
for k, v in a.items():
    print(k, v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Zipping and unzipping&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zipping
a = [1, 2, 3]
b = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
z = zip(a, b) # [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]
#
# Unzipping
zip(*z) # [(1, 2, 3), (&#39;1&#39;, &#39;b&#39;, &#39;c&#39;)]
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    

  </channel>
</rss>
