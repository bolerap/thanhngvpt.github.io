<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David&#39;s Notepad </title>
    <link>https://thanhngvpt.github.io/index.xml</link>
    <language>en-us</language>
    <author>thanhngvpt</author>
    <rights>(C) 2016</rights>
    <updated>2016-10-21 16:45:45 &#43;0700 ICT</updated>

    
      
        <item>
          <title>chapter 4 array slice map</title>
          <link>https://thanhngvpt.github.io/post/go/book/goinaction/chapter-4-array-slice-map/</link>
          <pubDate>Fri, 21 Oct 2016 16:45:45 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/go/book/goinaction/chapter-4-array-slice-map/</guid>
          <description>&lt;p&gt;Khá khó khăn để viết các chương trình không cần lưu trữ và đọc các nhóm dữ liệu. Nếu bạn dùng databases hoặc files hoặc truy cập web, bạn cần một cách thức để xử lý dữ liệu nhận được và gửi đi. Go có ba cấu trúc dữ liệu (data structure) khác nhau cho phép bạn làm việc với các nhóm dữ liệu là: arrays, slices, maps. Những cấu trúc dữ liệu này đã được tích hợp sẵn vào ngôn ngữ và sử dụng xuyên suốt các thư viện chuẩn (standard library). Khi bạn học về cách làm việc của những cấu trúc dữ liệu này, việc lập trình trong go trở nên fun, fast và flexible.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Array internals and fundamentals.&lt;/p&gt;

&lt;p&gt;[It makes sense to start with arrays] vì nó là cấu trúc dữ liệu nền tảng cho slice và map. Việc hiểu cách array làm việc sẽ giúp bạn đánh giá đúng sự lịch lãm và sức mạnh mà slice và map cung cấp.&lt;/p&gt;

&lt;p&gt;1.1 Internals.&lt;/p&gt;

&lt;p&gt;Một array trong go là một kiểu dữ liệu fixed length chứa một khối các phần tử cùng kiểu kề nhau. Điều này có thể như một built-in type như integer, string hoặc là kiểu cấu trúc. Trong hình 1.1 dưới đây mô tả một array. Các phần tử của array được tô màu xám và được kết nối xâu chuỗi với các phần tử khác. Mỗi phần tử đều cùng kiểu dữ liệu, trong trường hợp này là integer và có thể được truy cập thông qua một chỉ số duy nhất.
[Hình 1.1 thêm sau]&lt;/p&gt;

&lt;p&gt;Array là cấu trúc dữ liệu rất có ích bởi vì bộ nhớ được phân bổ tuần tự.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Mode algorithm</title>
          <link>https://thanhngvpt.github.io/post/go/mode-algorithm/</link>
          <pubDate>Fri, 21 Oct 2016 14:15:20 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/go/mode-algorithm/</guid>
          <description>&lt;p&gt;Mode algorithm là thuật toán được sử dụng để tìm ra phần tử lặp lại nhiều nhất trong một array. Source dưới đây cài đặt cho thuật toán tìm mode của 1 array sử dụng ngôn ngữ Go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// sử dụng slice
function sliceMode(input []int) int {
    count := make([]input, len(input))
    maxValue := 0
    maxKey := 0
    for i := range input {
        count[input[i]]++
        if count[input[i]] &amp;gt; maxValue {
            maxValue = count[input[i]]
            maxKey = input[i]
        }
    }

    return maxKey
}

// sử dụng map
function mapMode([]input) int {
    count := make(map[int]int)
    maxValue, maxKey := 0, 0
    for i := range input {
        count[input[i]]++
        if count[input[i]] &amp;gt; maxValue {
            maxValue = count[input[i]]
            maxKey = input[i]
        }
    }

    return maxKey
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>createClass vs Component in React</title>
          <link>https://thanhngvpt.github.io/post/react/create-class-vs-component/</link>
          <pubDate>Thu, 20 Oct 2016 15:55:47 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/react/create-class-vs-component/</guid>
          <description>&lt;p&gt;Để tạo một react component ta có thể dùng cú pháp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// cách 1
const = react.createClass({
    getInitialState() {
        return {name: &#39;David&#39;}
    },

    propTypes: {},

    getDefaultProps() {
        return {}
    },

    handleClick() {
        console.log(this);
    },

    render() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Hello, {this.state.name}&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hoặc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// cách 2
class Comment extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            name: &#39;David&#39;
        };
        this.handleClick = this.handleClick.bind(this);
    }

    handleClick() {
        console.log(this);
    }

    render() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;h1&amp;gt;Hello, {this.state.name}&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
}

Comment.propTypes = {};
Comment.defaultProps = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Về bản chất hai cú pháp đều thực hiện công việc giống nhau, cách 1 sử dụng cú pháp ES5 cách 2 sử dụng cú pháp ES6. Vài điểm khác nhau giữa 2 cách như sau:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;initState: cách 1 dùng function getInitialState(), cách 2 set object trong constructor.&lt;/li&gt;
&lt;li&gt;defaultProps: cách 1 là sử dụng function getDefaultProps(), cách 2 set object defaultProps.&lt;/li&gt;
&lt;li&gt;handler Event: cách 1 tự động bind vào component khi gọi, cách 2 phải bind manual hoặc bind trong constructor.&lt;/li&gt;
&lt;li&gt;mixin: cách 1 hỗ trợ, cách 2 không hỗ trợ&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Python tricks</title>
          <link>https://thanhngvpt.github.io/post/python/python-tricks/</link>
          <pubDate>Thu, 20 Oct 2016 14:57:11 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/python/python-tricks/</guid>
          <description>&lt;p&gt;&lt;strong&gt;Unpacking&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#1
a, b, c = 1, 2, 3
d = a, b, c
print(d, type(d)) # (1, 2, 3) - tuple
#
#2
a, b, c = (2 * i + 1 for i in range(3))
d = a, b, c
print(d) # (1, 3, 5)
#
#3
a, (b, c), d = [1, (2, 3), 5]
print(a, b, c, d) # 1 2 3 5
#
#4 - swapping variables
a, b = 1, 2
a, b = b, a
print(a, b) # 2 1
#5 extended unpacking (python 3 only)
a, b, *c = [1, 2, 3, 4, 5, 6]
print(c) # [3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Negative indexing&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
print(a[0], a[-1]) # 1 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Slicing&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = [1, 2, 3, 4, 5]
print(a[1:3]) # [2, 3]
print(a[-3:-1]) # [3, 4]
print(a[::2]) # [1, 3, 5]
print(a[::-1]) # [5, 4, 3, 2, 1]
#
# list slice assignment
a[1:-1] = []
print(a) # [1, 5]
#
# naming slice: slice(start, end, step)
a = list(range(5))
last_two = a[-2:]
print(a[last_two]) # [4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Iterating&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# List
a = [&#39;Hello&#39;, &amp;quot;World&amp;quot;, &#39;Python&#39;]
for i, v in enumerate(a):
    print(i, v)
#
# Dictionary (dic_var_name.iteritems() in python 2)
a = {&#39;name&#39;: &#39;Peter&#39;, &#39;age&#39;: 25}
for k, v in a.items():
    print(k, v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Zipping and unzipping&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# zipping
a = [1, 2, 3]
b = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
z = zip(a, b) # [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]
#
# Unzipping
zip(*z) # [(1, 2, 3), (&#39;1&#39;, &#39;b&#39;, &#39;c&#39;)]
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>ES6 features</title>
          <link>https://thanhngvpt.github.io/post/es/es6-features/</link>
          <pubDate>Thu, 20 Oct 2016 14:38:05 ICT</pubDate>
          <author>thanhngvpt</author>
          <guid>https://thanhngvpt.github.io/post/es/es6-features/</guid>
          <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ducimus excepturi dignissimos perspiciatis magnam provident molestias voluptatem enim, blanditiis voluptate voluptas. Atque, natus? Id assumenda, corporis recusandae perferendis, quidem at tempora!&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
